{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Model Design - Brandon","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"3dWOgMCQn692","colab_type":"code","colab":{}},"source":["!pip install livelossplot==0.5.1 --quiet"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DA8yA99ZdDsa","colab_type":"code","colab":{}},"source":["import pickle\n","import h5py\n","import numpy as np\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","import cv2 as cv\n","from torchvision.datasets import ImageFolder\n","from torchvision import transforms\n","from skimage.transform import resize\n","from torch.utils.data import random_split, DataLoader, Dataset, ConcatDataset\n","\n","from PIL import Image\n","\n","from matplotlib import pyplot as plt\n","\n","from livelossplot import PlotLosses\n","\n","from PIL import Image\n","\n","from matplotlib import pyplot as plt\n","\n","from livelossplot import PlotLosses\n","from os import listdir\n","from sys import getsizeof"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QXkyWg5r02L2","colab_type":"code","colab":{}},"source":["class h5Dataset(Dataset):\n","\n","    def __init__(self, file_path, file_name, func=None):\n","        # file_path: path to .h5 file\n","        self.file = h5py.File(file_path + file_name, \"r\")\n","\n","        self.func = func\n","\n","        self.rgb_dbs = sorted([key for key in self.file.keys() \\\n","                                if key[:3] == \"rgb\"])\n","        self.depth_dbs = sorted([key for key in self.file.keys() \\\n","                                if key[:5] == \"depth\"])\n","        \n","        self.totens = transforms.ToTensor()\n","\n","    def __getitem__(self, index):\n","        \n","        rgb = self.file[self.rgb_dbs[index]][:].astype('float64') / 255\n","        depth = self.file[self.depth_dbs[index]][:].astype('float64') / 65535\n","        \n","        rgb = self.totens(rgb)\n","        depth = self.totens(depth)\n","\n","        if self.func:\n","            rgb, depth = self.func(rgb, depth)\n","            \n","        return rgb, depth\n","\n","    def __len__(self):\n","        return min(len(self.rgb_dbs), len(self.depth_dbs))\n","\n","def load_dataset(file_path, file_name, batch_size, ratios=(.7, .15, .15), shuffle=True):\n","\n","    dataset = h5Dataset(file_path=file_path, file_name=file_name, func=alter)\n","    \n","    num_samples = len(dataset)\n","    len1 = int(num_samples*ratios[0])\n","    len2 = int(num_samples*ratios[1])\n","\n","    train_data, val_data, test_data = random_split(dataset,\n","                                    (len1, len2, num_samples-len1-len2))\n","    \n","    print(len(train_data), len(val_data), len(test_data))\n","    \n","    train_loader = DataLoader(train_data, batch_size=batch_size, \n","                              shuffle=shuffle, num_workers=0)\n","    val_loader = DataLoader(val_data, batch_size=batch_size, \n","                              shuffle=shuffle, num_workers=0)\n","    test_loader = DataLoader(test_data, batch_size=batch_size, \n","                              shuffle=shuffle, num_workers=0)\n","\n","    return train_loader, val_loader, test_loader\n","\n","def alter(rgb, depth):\n","\n","    norm = transforms.Normalize((0.0402), (0.089))\n","    res = norm(depth)\n","\n","    return rgb, res"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jZ9uGjkZdGY_","colab_type":"code","colab":{}},"source":["filepath = \"/content/drive/My Drive/APS360_Project/Data/\""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lJx2okBOqa-E","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":561},"executionInfo":{"status":"error","timestamp":1596699534440,"user_tz":420,"elapsed":125131,"user":{"displayName":"Brandon Wu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjURhugDkcSLOlWpaj9nrWFjn4eRpKixx_JN0ikZQ=s64","userId":"05945718063870509640"}},"outputId":"15a1e252-88df-4d17-8e72-1a4f6c8772cc"},"source":["train_loader, val_loader, test_loader = load_dataset(\n","        file_path=filepath,\n","        file_name=\"data.h5\",\n","        batch_size=32,\n","        ratios=(.7, .15, .15)\n","        )"],"execution_count":null,"outputs":[{"output_type":"error","ename":"RuntimeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-5935a6851933>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m         \u001b[0mfile_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"data.h5\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m         \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m32\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m         \u001b[0mratios\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m.7\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m.15\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m.15\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m         )\n","\u001b[0;32m<ipython-input-4-b09e4a4039d9>\u001b[0m in \u001b[0;36mload_dataset\u001b[0;34m(file_path, file_name, batch_size, ratios, shuffle)\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mload_dataset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfile_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mratios\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m.7\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m.15\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m.15\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshuffle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m     \u001b[0mdataset\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh5Dataset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_path\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfile_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfile_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfile_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0malter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     33\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m     \u001b[0mnum_samples\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-4-b09e4a4039d9>\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, file_path, file_name, func)\u001b[0m\n\u001b[1;32m      7\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrgb_dbs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msorted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m                                 \u001b[0;32mif\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"rgb\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdepth_dbs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msorted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m                                 \u001b[0;32mif\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"depth\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-4-b09e4a4039d9>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m      7\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrgb_dbs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msorted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m                                 \u001b[0;32mif\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"rgb\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdepth_dbs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msorted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m                                 \u001b[0;32mif\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"depth\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/_collections_abc.py\u001b[0m in \u001b[0;36m__iter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    718\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    719\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__iter__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 720\u001b[0;31m         \u001b[0;32myield\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mapping\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    721\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    722\u001b[0m \u001b[0mKeysView\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mregister\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdict_keys\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/h5py/_hl/group.py\u001b[0m in \u001b[0;36m__iter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    407\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__iter__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    408\u001b[0m         \u001b[0;34m\"\"\" Iterate over member names \"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 409\u001b[0;31m         \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mid\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__iter__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    410\u001b[0m             \u001b[0;32myield\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    411\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mh5py/h5g.pyx\u001b[0m in \u001b[0;36mh5py.h5g.GroupID.__iter__\u001b[0;34m()\u001b[0m\n","\u001b[0;32mh5py/h5g.pyx\u001b[0m in \u001b[0;36mh5py.h5g.GroupID.__iter__\u001b[0;34m()\u001b[0m\n","\u001b[0;32mh5py/h5g.pyx\u001b[0m in \u001b[0;36mh5py.h5g.GroupIter.__init__\u001b[0;34m()\u001b[0m\n","\u001b[0;32mh5py/_objects.pyx\u001b[0m in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n","\u001b[0;32mh5py/_objects.pyx\u001b[0m in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n","\u001b[0;32mh5py/h5g.pyx\u001b[0m in \u001b[0;36mh5py.h5g.GroupID.get_num_objs\u001b[0;34m()\u001b[0m\n","\u001b[0;31mRuntimeError\u001b[0m: Can't determine (bad symbol table node signature)"]}]},{"cell_type":"code","metadata":{"id":"_eBB-SicdHk2","colab_type":"code","colab":{}},"source":["for i, batch in enumerate(train_loader):\n","    rgb, depth = batch\n","\n","    print(rgb.shape, depth.shape)\n","\n","    print(torch.max(depth), )\n","    print(torch.min(depth))\n","    print(torch.mean(depth))\n","\n","    plt.imshow(rgb[0].permute(1, 2, 0))\n","    plt.show()\n","    plt.imshow(depth[0].permute(1,2,0).squeeze(), cmap='gray')\n","    print(depth[0].squeeze().size())\n","    plt.show()\n","    break"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mL1tpS8euuzn","colab_type":"code","colab":{}},"source":["class Interpolate(nn.Module):\n","    def __init__(self, size, mode):\n","        super(Interpolate, self).__init__()\n","        self.interp = nn.functional.interpolate\n","        self.size = size\n","        self.mode = mode\n","        \n","    def forward(self, x):\n","        x = self.interp(x, size=self.size, mode=self.mode)\n","        return x"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4_y-KMJ4iGGQ","colab_type":"code","colab":{}},"source":["class tempmodel(nn.Module):\n","    def __init__(self):\n","        super(tempmodel, self).__init__()\n","\n","        self.conv = nn.Sequential(\n","            nn.Conv2d(3, 40, kernel_size=3, padding=1),\n","            nn.LeakyReLU(),\n","            nn.MaxPool2d(2,2),\n","            nn.Conv2d(40, 80, kernel_size=3, padding=1),\n","            nn.LeakyReLU(),\n","            nn.MaxPool2d(2,2),\n","            nn.Conv2d(80, 160, kernel_size=3, padding=1),\n","            nn.LeakyReLU(),\n","            nn.MaxPool2d(2,2),\n","        )\n","\n","        self.trans_conv = nn.Sequential(               \n","            nn.ConvTranspose2d(160, 80, kernel_size=3),\n","            Interpolate(size = (120, 160), mode = 'nearest'),\n","            nn.LeakyReLU(),\n","            nn.ConvTranspose2d(80, 40, kernel_size=3, padding = 1),\n","            Interpolate(size = (240, 320), mode = 'nearest'),\n","            nn.LeakyReLU(),\n","            nn.ConvTranspose2d(40, 1, kernel_size=3, padding = 2),\n","            Interpolate(size = (480,640), mode = 'nearest'),\n","            nn.Sigmoid(),\n","        )\n","\n","    def forward(self, x):\n","        return self.trans_conv(self.conv(x))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"z05dK9x4iJ_0","colab_type":"code","colab":{}},"source":["def train(model, batch_size=32, learning_rate=0.01, num_epochs=1, \\\n","          ratios=(.7, .15, .15)):\n","\n","    torch.autograd.set_detect_anomaly(True)\n","\n","    plotlosses = PlotLosses()\n","\n","    torch.manual_seed(1)\n","\n","    criterion = nn.MSELoss()\n","    optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n","    scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer=optimizer, \\\n","                                        factor=0.5, patience=5, verbose=True)\n","\n","    for epoch in range(num_epochs):\n","        total_loss = 0.0\n","\n","        for i, (rgb, depth) in enumerate(train_loader):\n","            model.train()\n","            if torch.cuda.is_available():\n","                rgb = rgb.cuda()\n","                depth = depth.cuda()\n","            \n","            optimizer.zero_grad()\n","\n","            pred = model(rgb.float())\n","            \n","            loss = torch.sqrt(criterion(depth.squeeze(), pred.squeeze()))\n","            \n","            val_loss = batch_loss(model, criterion, val_loader)\n","\n","            scheduler.step(val_loss)\n","\n","            total_loss += loss.item()\n","            \n","            loss.backward()\n","            optimizer.step()\n","\n","            plotlosses.update({\n","                'loss': loss.item(),\n","                'val_loss': val_loss\n","            })\n","            plotlosses.send()\n","\n","            fig = plt.figure()\n","            fig.set_figheight(15)\n","            fig.set_figwidth(15)\n","            fig.add_subplot(3,1,1)\n","            plt.imshow(rgb.float().detach().cpu()[0].permute(1, 2, 0))\n","            fig.add_subplot(3,1,2)\n","            plt.imshow(depth.detach().cpu()[0].permute(1, 2, 0).squeeze(), cmap=\"gray\")\n","            fig.add_subplot(3,1,3)\n","            plt.imshow(pred.detach().cpu()[0].permute(1, 2, 0).squeeze(), cmap=\"gray\")\n","            plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9z9VXG7biB8c","colab_type":"code","colab":{}},"source":["def batch_loss(model, criterion, val_loader):\n","    with torch.no_grad():\n","        model.eval()\n","\n","        total_loss = 0.0\n","\n","        for i, (rgb, depth) in enumerate(val_loader):\n","\n","            if torch.cuda.is_available():\n","                rgb = rgb.cuda()\n","                depth = depth.cuda()\n","            \n","            pred = model(rgb.float())\n","            del rgb\n","\n","            loss = torch.sqrt(criterion(depth.squeeze(), pred.squeeze())).item()\n","            del pred, depth\n","            torch.cuda.empty_cache()\n","\n","            total_loss += loss\n","\n","        return total_loss / (i+1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ff3epv-3dI6a","colab_type":"code","colab":{}},"source":["import gc\n","gc.collect()\n","torch.cuda.empty_cache()\n","\n","tempmodel1 = tempmodel()\n","\n","if torch.cuda.is_available():\n","    print(\"GPU available\")\n","    tempmodel1.cuda()\n","\n","train(tempmodel1, batch_size=32, learning_rate=0.0001, num_epochs=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Vsk8vJqIAUG6","colab_type":"code","colab":{}},"source":["!nvidia-smi"],"execution_count":null,"outputs":[]}]}